setwd("~/git/unitTestingExample")
# Initialize testthat
usethis::use_testthat()
usethis::use_package("shiny")
shinytest2::use_shinytest2()
# Simple R function
square <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
return(x^2)
}
usethis::use_test("square")
devtools::test()
getwd()
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
setwd("~/git/unitTestingExample")
runApp('R')
getwd()
shinytest2::record_test()
app <- AppDriver$new(name = "unitTestingExample")
app$click("calc")
app$get_values()
app$set_inputs(num = 4)
app$click("calc")
app$get_values()
testthat::test_dir()
testthat::test_dir(getwd())
getwd
getwd()
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
# This test checks that the app can be launched and that the input can be set.
app <- AppDriver$new(name = "unitTestingExample")
# Set the input value for 'num' to 4
app$set_inputs(num = 4)
# Simulate clicking the 'calc' button
app$click("calc")
app$get_values()
app$expect_values
app$expect_values()
# This test checks that the app can be launched and that the input can be set.
app <- AppDriver$new(name = "unitTestingExample")
# This test checks that the app can be launched and that the input can be set.
app <- AppDriver$new(name = "unitTestingExample")
getwd()
app$stop
app$stop()
# This test checks that the app can be launched and that the input can be set.
app <- AppDriver$new(name = "unitTestingExample")
shinytest2::record_test()
shiny::runApp()
library(shinytest2)
library(testthat)
runApp()
runApp()
shinytest2::record_test()
app <- AppDriver$new(name = "unitTestingExample", height = 695, width = 1235)
app$view()
app$view(getwd())
app$click("calc")
app$get_values()
result <- get_values()$output$result
result <- app$get_values()$output$result
result
expect_equal(result, "Square is: 4")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
# Initialize testthat
usethis::use_testthat()
1 + 1
library(testthat)
library(shinytest2)
library(testthat)
library(shinytest2)
usethis::use_testthat()
usethis::use_test("square.R")
# Simple R function
square <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
return(x^2)
}
usethis::use_test("square")
getwd()
usethis::use_test("square")
rm(square)
devtools::load_all()
usethis::use_test("square")
usethis::use_test("square")
# Simple R function
square <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
return(x^2)
}
devtools::test()
getwd(*)
rlang::last_trace()
devtools::test()
test_dir("tests/testthat")
test_dir("tests/testthat")
usethis::use_test("square")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
rm(square)
testthat::test_dir("tests/testthat")
# Simple R function
square <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
return(x^2 + 1)
}
testthat::test_dir("tests/testthat")
# Simple R function
square <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
return(x^2)
}
testthat::test_dir("tests/testthat")
profvis::profvis({
square <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
Sys.sleep(5)
return(x^2)
}
})
square(2)
square(2)
inefficient_identity <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
mat <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
mat[i, j] <- 1
} else {
mat[i, j] <- 0  # Redundant â€” matrix was already initialized with 0
}
}
}
return(mat)
}
inefficient_identity(3)
profvis::profvis({})
profvis::profvis({inefficient_identity(4)})
profvis::profvis({inefficient_identity(5000)})
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
identity_matrix(5)
usethis::use_test("identity_matrix")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n + 1)
}
testthat::test_dir("tests/testthat")
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
testthat::test_dir("tests/testthat")
shinytest2::use_shinytest2()
shinytest2::record_test()
runApp()
shinytest2::record_test()
runApp()
runApp()
shinytest2::record_test()
app <- AppDriver$new(name = "unitTestingExample")
app$get_values()
app$set_inputs(n = 4)
app$get_values()
app$stop
app$stop()
app <- AppDriver$new(name = "unitTestingExample")
app <- AppDriver$new(name = "unitTestingExample")
runApp()
runApp()
runApp()
app <- AppDriver$new(name = "unitTestingExample")
app$get_values()
app$get_values(export=TRUE)
app$get_value(export)
app$get_value(export = TRUE)
app$get_value("identity_matrix")
app$get_value(export = "identity_matrix")
testthat::test_dir("tests/testthat")
shinytest2::record_test()
testthat::test_dir("tests/testthat")
app <- AppDriver$new(name = "unitTestingExample")
app$view()
app$View()
runApp()
testthat::test_dir("tests/testthat")
?stop
?expect_error
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n + 1)
}
testthat::test_dir("tests/testthat")
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
shinytest2::record_test()
shinytest2::record_test()
shinytest2::record_test()
shinytest2::record_test()
shinytest2::record_test()
app <- AppDriver$new(name = "test", height = 695, width = 1235)
app$get_values()
app$set_inputs(n = 4)
app$get_values()
app <- AppDriver$new(name = "test", height = 695, width = 1235)
app$set_inputs(n = 4)
app$get_values
app$get_values()
app$get_value(export = "identity_matrix")
matrix_4 <- app$get_value(export = "identity_matrix")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
library(testthat)
library(shinytest2)
usethis::use_testthat()
usethis::use_test("identity_matrix")
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
View(identity_matrix)
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
testthat::test_dir("tests/testthat")
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
#' Create an identity matrix of size n
#'
#' @param n A positive integer specifying the size of the matrix (n x n)
#' @return An n x n identity matrix
identity_matrix <- function(n) {
if (!is.numeric(n) || n <= 0 || n != floor(n)) {
stop("n must be a positive integer")
}
diag(n)
}
testthat::test_dir("tests/testthat")
